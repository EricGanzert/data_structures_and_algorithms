R-3.2
If 2 entries of an array A are equal to each other their order will not be changed by the insertion sort algorithm in code fragment 3.7
This is because it will only switch the places of 2 elements if the lower indexed element is larger. It would be unnecessary to cary out that switch.

R-3.12

--> ReverseArray(A, 0, 4) --> ReverseArray(A, 1, 3) --> ReverseArray(A, 2, 2) --> ReverseArray(A, 3, 1)
        |         ^               |         ^               |         ^               |
       /           \             /           \             /           \             /
 <-----             -------------             -------------             -------------

R-3.13
                                                                                          ---- abc
                                                           ---- PuzzleSolve(1, {ab}, {cd})
                                                          |                               ---- abd
                                                          |
                                                          |                               ---- acb
                            ---- PuzzleSolve(2, {a}, {bcd})---- PuzzleSolve(1, {ac}, {bd})
                          /                               |                               ---- acd
                         |                                |
                         |                                |                               ---- adb
                         |                                 ---- PuzzleSolve(1, {ad}, {bc})
                         |                                                                ---- adc
                         |
                         |                                                              ---- bac
                         |                               ---- PuzzleSolve(1, {ba}, {cd})
                         |                              |                               ---- bad
                         |                              |
                         |                              |                               ---- bca
                         |---- PuzzleSolve(2, {b}, {acd})---- PuzzleSolve(1, {bc}, {ad})
                         |                              |                               ---- bcd
                         |                              |
                         |                              |                               ---- bda
                         |                               ---- PuzzleSolve(1, {bd}, {ac})
                         |                                                              ---- bdc
PuzzleSolve(3, {}, {abcd})
                         |                                                              ---- cab
                         |                               ---- PuzzleSolve(1, {ca}, {bd})
                         |                              |                               ---- cad
                         |                              |
                         |                              |                               ---- cba
                         |---- PuzzleSolve(2, {c}, {abd})---- PuzzleSolve(1, {cb}, {ad})
                         |                              |                               ---- cbd
                         |                              |
                         |                              |                               ---- cda
                         |                               ---- PuzzleSolve(1, {cd}, {ab})
                         |                                                              ---- cdb
                         |
                         |                                                                ---- dab
                         |                                 ---- PuzzleSolve(1, {da}, {bc})
                         |                                |                               ---- dac
                         |                                |
                          \                               |                               ---- dba
                            ---- PuzzleSolve(2, {d}, {abc})---- PuzzleSolve(1, {db}, {ac})
                                                          |                               ---- dbc
                                                          |
                                                          |                               ---- dca
                                                           ---- PuzzleSolve(1, {dc}, {ab})
                                                                                          ---- dcb

C-3.10
It is faster to swap nodes in a doubly linked list because you already have a pointer to the previous element unlike in singly linked lists.
For singly linked list you have to iterate throught the list to obtain pointers to prev nodes before beginning the swap.

C-3.12
Towers of Hanoi

How to move 1 disk to destination peg - solve(n == 1, destination, storage):
i) move disk(n) to destination peg

How to 2 disks to a destination peg - solve(n == 2, destination, storage):
i) move disk(n) to storage peg
ii) move disk(n-1) to destination peg
iii) move disk(n) to destination peg

How to move 3 disks to a destination peg - solve(n == 3, destination, storage):
i) execute solve(n == 2, storage, destination)
ii) move disk(n-2) to destination peg
iii) execute solve(n == 2, destination, storage)

How to move 4 disks to a destination peg - solve(n == 4, destination, storage):
i) execute solve(n == 3, storage, destination)
ii) move disk(n-3) to destination peg
iii) execute solve(n == 3, destination, storage)

*****
How to move n disks to a destination peg - solve(n, destination, storage):
i) execute solve(n-1, storage, destination)
ii) move lowest largest disk to destination peg
iii) execute solve(n-1, destination, storage)
*****